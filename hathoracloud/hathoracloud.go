// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package hathoracloud

// Generated from OpenAPI doc version 0.0.1 and generator version 2.729.2

import (
	"context"
	"fmt"
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/config"
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/globals"
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/hooks"
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"github.com/hathora/cloud-sdk-go/hathoracloud/models/components"
	"github.com/hathora/cloud-sdk-go/hathoracloud/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	"https://api.hathora.dev",
	"/",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// HathoraCloud - Hathora Cloud API: Welcome to the Hathora Cloud API documentation! Learn how to use the Hathora Cloud APIs to build and scale your game servers globally.
type HathoraCloud struct {
	SDKVersion string
	//
	TokensV1 *TokensV1
	RoomsV1  *RoomsV1
	RoomsV2  *RoomsV2
	// Deprecated. Use [ProcessesV3](https://hathora.dev/api#tag/ProcessesV3).
	ProcessesV1 *ProcessesV1
	// Deprecated. Use [ProcessesV3](https://hathora.dev/api#tag/ProcessesV3).
	ProcessesV2 *ProcessesV2
	// Operations to get data on active and stopped [processes](https://hathora.dev/docs/concepts/hathora-entities#process).
	ProcessesV3     *ProcessesV3
	OrganizationsV1 *OrganizationsV1
	NodesV1         *NodesV1
	// Deprecated. Use [ProcessesV3#GetProcessMetrics](https://hathora.dev/api#tag/ProcessesV3/operation/GetProcessMetrics) to fetch metrics about a specific process.
	MetricsV1 *MetricsV1
	//
	ManagementV1 *ManagementV1
	LogsV1       *LogsV1
	LobbiesV1    *LobbiesV1
	LobbiesV2    *LobbiesV2
	LobbiesV3    *LobbiesV3
	// Operations to manage and view a [fleet](https://hathora.dev/docs/concepts/hathora-entities#fleet).
	FleetsV1 *FleetsV1
	// Deprecated. Does not include latest Regions (missing Dallas region). Use [DiscoveryV2](https://hathora.dev/api#tag/DiscoveryV2).
	DiscoveryV1 *DiscoveryV1
	// Service that allows clients to directly ping all Hathora regions to get latency information
	DiscoveryV2   *DiscoveryV2
	DeploymentsV1 *DeploymentsV1
	DeploymentsV2 *DeploymentsV2
	// Operations that allow you configure and manage an application's [build](https://hathora.dev/docs/concepts/hathora-entities#build) at runtime.
	DeploymentsV3 *DeploymentsV3
	BuildsV1      *BuildsV1
	BuildsV2      *BuildsV2
	// Operations that allow you create and manage your [builds](https://hathora.dev/docs/concepts/hathora-entities#build).
	BuildsV3 *BuildsV3
	//
	BillingV1 *BillingV1
	// Operations that allow you to generate a Hathora-signed [JSON web token (JWT)](https://jwt.io/) for [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service).
	AuthV1 *AuthV1
	AppsV1 *AppsV1
	// Operations that allow you manage your [applications](https://hathora.dev/docs/concepts/hathora-entities#application).
	AppsV2 *AppsV2

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*HathoraCloud)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *HathoraCloud) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *HathoraCloud) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(hathoraDevToken string) SDKOption {
	return func(sdk *HathoraCloud) {
		security := components.Security{HathoraDevToken: &hathoraDevToken}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

// WithOrgID allows setting the OrgID parameter for all supported operations
func WithOrgID(orgID string) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.Globals.OrgID = &orgID
	}
}

// WithAppID allows setting the AppID parameter for all supported operations
func WithAppID(appID string) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.Globals.AppID = &appID
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *HathoraCloud) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *HathoraCloud {
	sdk := &HathoraCloud{
		SDKVersion: "0.11.1",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.11.1 2.729.2 0.0.1 github.com/hathora/cloud-sdk-go/hathoracloud",
			Globals:    globals.Globals{},
			ServerList: ServerList,
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.TokensV1 = newTokensV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.RoomsV1 = newRoomsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.RoomsV2 = newRoomsV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ProcessesV1 = newProcessesV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ProcessesV2 = newProcessesV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ProcessesV3 = newProcessesV3(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.OrganizationsV1 = newOrganizationsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.NodesV1 = newNodesV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.MetricsV1 = newMetricsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ManagementV1 = newManagementV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.LogsV1 = newLogsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.LobbiesV1 = newLobbiesV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.LobbiesV2 = newLobbiesV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.LobbiesV3 = newLobbiesV3(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.FleetsV1 = newFleetsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DiscoveryV1 = newDiscoveryV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DiscoveryV2 = newDiscoveryV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DeploymentsV1 = newDeploymentsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DeploymentsV2 = newDeploymentsV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DeploymentsV3 = newDeploymentsV3(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.BuildsV1 = newBuildsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.BuildsV2 = newBuildsV2(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.BuildsV3 = newBuildsV3(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.BillingV1 = newBillingV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AuthV1 = newAuthV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppsV1 = newAppsV1(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AppsV2 = newAppsV2(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
