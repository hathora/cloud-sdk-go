// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type UsageLimits struct {
	// The number of vCPU hours used up by the organization in the current month.
	MonthlyProcessVcpuHoursConsumed float64 `json:"monthlyProcessVcpuHoursConsumed"`
	// The maximum number of monthly process vcpu hours that can be run by the organization
	// If undefined, the organization has no limit.
	MonthlyProcessVcpuHoursLimit *float64 `json:"monthlyProcessVcpuHoursLimit,omitempty"`
	// The maximum number of concurrent processes that have been run by the organization in the last 7 days.
	ConcurrentProcessVcpus7DayMax float64 `json:"concurrentProcessVcpus7DayMax"`
	// The maximum number of concurrent processes that can be run by the organization
	// If undefined, the organization has no limit.
	ConcurrentProcessVcpusLimit *float64 `json:"concurrentProcessVcpusLimit,omitempty"`
}

func (o *UsageLimits) GetMonthlyProcessVcpuHoursConsumed() float64 {
	if o == nil {
		return 0.0
	}
	return o.MonthlyProcessVcpuHoursConsumed
}

func (o *UsageLimits) GetMonthlyProcessVcpuHoursLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.MonthlyProcessVcpuHoursLimit
}

func (o *UsageLimits) GetConcurrentProcessVcpus7DayMax() float64 {
	if o == nil {
		return 0.0
	}
	return o.ConcurrentProcessVcpus7DayMax
}

func (o *UsageLimits) GetConcurrentProcessVcpusLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.ConcurrentProcessVcpusLimit
}
