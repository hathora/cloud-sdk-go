// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

// CurrentAllocation - Metadata on an allocated instance of a room.
type CurrentAllocation struct {
	UnscheduledAt *time.Time `json:"unscheduledAt"`
	ScheduledAt   time.Time  `json:"scheduledAt"`
	// System generated unique identifier to a runtime instance of your game server.
	ProcessID string `json:"processId"`
	// System generated unique identifier to an allocated instance of a room.
	RoomAllocationID string `json:"roomAllocationId"`
}

func (c CurrentAllocation) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CurrentAllocation) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"unscheduledAt", "scheduledAt", "processId", "roomAllocationId"}); err != nil {
		return err
	}
	return nil
}

func (c *CurrentAllocation) GetUnscheduledAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.UnscheduledAt
}

func (c *CurrentAllocation) GetScheduledAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.ScheduledAt
}

func (c *CurrentAllocation) GetProcessID() string {
	if c == nil {
		return ""
	}
	return c.ProcessID
}

func (c *CurrentAllocation) GetRoomAllocationID() string {
	if c == nil {
		return ""
	}
	return c.RoomAllocationID
}

// Room - A room object represents a game session or match.
type Room struct {
	CurrentAllocation *CurrentAllocation `json:"currentAllocation"`
	// The allocation status of a room.
	//
	// `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
	//
	// `active`: ready to accept connections
	//
	// `destroyed`: all associated metadata is deleted
	Status      RoomStatus       `json:"status"`
	Allocations []RoomAllocation `json:"allocations"`
	RoomConfig  *string          `json:"roomConfig,omitempty"`
	// Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
	// Note: error will be returned if `roomId` is not globally unique.
	RoomID string `json:"roomId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (r *Room) GetCurrentAllocation() *CurrentAllocation {
	if r == nil {
		return nil
	}
	return r.CurrentAllocation
}

func (r *Room) GetStatus() RoomStatus {
	if r == nil {
		return RoomStatus("")
	}
	return r.Status
}

func (r *Room) GetAllocations() []RoomAllocation {
	if r == nil {
		return []RoomAllocation{}
	}
	return r.Allocations
}

func (r *Room) GetRoomConfig() *string {
	if r == nil {
		return nil
	}
	return r.RoomConfig
}

func (r *Room) GetRoomID() string {
	if r == nil {
		return ""
	}
	return r.RoomID
}

func (r *Room) GetAppID() string {
	if r == nil {
		return ""
	}
	return r.AppID
}
