// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

type NodeV1Status string

const (
	NodeV1StatusRunning  NodeV1Status = "running"
	NodeV1StatusDraining NodeV1Status = "draining"
	NodeV1StatusStopped  NodeV1Status = "stopped"
)

func (e NodeV1Status) ToPointer() *NodeV1Status {
	return &e
}

type NodeV1 struct {
	StoppedAt *time.Time   `json:"stoppedAt"`
	StartedAt time.Time    `json:"startedAt"`
	Gpu       *float64     `json:"gpu"`
	MemoryMb  float64      `json:"memoryMb"`
	CPU       float64      `json:"cpu"`
	Region    Region       `json:"region"`
	Status    NodeV1Status `json:"status"`
	Hosting   Hosting      `json:"hosting"`
	Host      string       `json:"host"`
	NodeID    string       `json:"nodeId"`
}

func (n NodeV1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NodeV1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"startedAt", "memoryMb", "cpu", "region", "status", "hosting", "host", "nodeId"}); err != nil {
		return err
	}
	return nil
}

func (n *NodeV1) GetStoppedAt() *time.Time {
	if n == nil {
		return nil
	}
	return n.StoppedAt
}

func (n *NodeV1) GetStartedAt() time.Time {
	if n == nil {
		return time.Time{}
	}
	return n.StartedAt
}

func (n *NodeV1) GetGpu() *float64 {
	if n == nil {
		return nil
	}
	return n.Gpu
}

func (n *NodeV1) GetMemoryMb() float64 {
	if n == nil {
		return 0.0
	}
	return n.MemoryMb
}

func (n *NodeV1) GetCPU() float64 {
	if n == nil {
		return 0.0
	}
	return n.CPU
}

func (n *NodeV1) GetRegion() Region {
	if n == nil {
		return Region("")
	}
	return n.Region
}

func (n *NodeV1) GetStatus() NodeV1Status {
	if n == nil {
		return NodeV1Status("")
	}
	return n.Status
}

func (n *NodeV1) GetHosting() Hosting {
	if n == nil {
		return Hosting("")
	}
	return n.Hosting
}

func (n *NodeV1) GetHost() string {
	if n == nil {
		return ""
	}
	return n.Host
}

func (n *NodeV1) GetNodeID() string {
	if n == nil {
		return ""
	}
	return n.NodeID
}
