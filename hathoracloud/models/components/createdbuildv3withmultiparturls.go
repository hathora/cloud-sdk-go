// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

// CreatedBuildV3WithMultipartUrls - A build represents a game server artifact and its associated metadata.
type CreatedBuildV3WithMultipartUrls struct {
	// When the build expired
	ExpiredAt *time.Time `json:"expiredAt,omitempty"`
	// Url to view details, like build logs, of the build.
	ShareURL    *string `json:"shareUrl,omitempty"`
	ContentHash *string `json:"contentHash,omitempty"`
	// Tag to associate an external version with a build. It is accessible via [`GetBuild()`](https://hathora.dev/api#tag/BuildsV3/operation/GetBuild).
	BuildTag *string `json:"buildTag,omitempty"`
	// The size (in bytes) of the Docker image built by Hathora.
	ImageSize int64       `json:"imageSize"`
	Status    BuildStatus `json:"status"`
	// When the build was deleted.
	DeletedAt *time.Time `json:"deletedAt"`
	// When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) finished executing.
	FinishedAt *time.Time `json:"finishedAt"`
	// When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) is called.
	StartedAt *time.Time `json:"startedAt"`
	// When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild) is called.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// System generated id for a build. Can also be user defined when creating a build.
	BuildID string `json:"buildId"`
	// System generated unique identifier for an organization. Not guaranteed to have a specific format.
	OrgID                        string      `json:"orgId"`
	CompleteUploadPostRequestURL string      `json:"completeUploadPostRequestUrl"`
	MaxChunkSize                 float64     `json:"maxChunkSize"`
	UploadParts                  []BuildPart `json:"uploadParts"`
}

func (c CreatedBuildV3WithMultipartUrls) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatedBuildV3WithMultipartUrls) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"imageSize", "status", "createdAt", "createdBy", "buildId", "orgId", "completeUploadPostRequestUrl", "maxChunkSize", "uploadParts"}); err != nil {
		return err
	}
	return nil
}

func (c *CreatedBuildV3WithMultipartUrls) GetExpiredAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.ExpiredAt
}

func (c *CreatedBuildV3WithMultipartUrls) GetShareURL() *string {
	if c == nil {
		return nil
	}
	return c.ShareURL
}

func (c *CreatedBuildV3WithMultipartUrls) GetContentHash() *string {
	if c == nil {
		return nil
	}
	return c.ContentHash
}

func (c *CreatedBuildV3WithMultipartUrls) GetBuildTag() *string {
	if c == nil {
		return nil
	}
	return c.BuildTag
}

func (c *CreatedBuildV3WithMultipartUrls) GetImageSize() int64 {
	if c == nil {
		return 0
	}
	return c.ImageSize
}

func (c *CreatedBuildV3WithMultipartUrls) GetStatus() BuildStatus {
	if c == nil {
		return BuildStatus("")
	}
	return c.Status
}

func (c *CreatedBuildV3WithMultipartUrls) GetDeletedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.DeletedAt
}

func (c *CreatedBuildV3WithMultipartUrls) GetFinishedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.FinishedAt
}

func (c *CreatedBuildV3WithMultipartUrls) GetStartedAt() *time.Time {
	if c == nil {
		return nil
	}
	return c.StartedAt
}

func (c *CreatedBuildV3WithMultipartUrls) GetCreatedAt() time.Time {
	if c == nil {
		return time.Time{}
	}
	return c.CreatedAt
}

func (c *CreatedBuildV3WithMultipartUrls) GetCreatedBy() string {
	if c == nil {
		return ""
	}
	return c.CreatedBy
}

func (c *CreatedBuildV3WithMultipartUrls) GetBuildID() string {
	if c == nil {
		return ""
	}
	return c.BuildID
}

func (c *CreatedBuildV3WithMultipartUrls) GetOrgID() string {
	if c == nil {
		return ""
	}
	return c.OrgID
}

func (c *CreatedBuildV3WithMultipartUrls) GetCompleteUploadPostRequestURL() string {
	if c == nil {
		return ""
	}
	return c.CompleteUploadPostRequestURL
}

func (c *CreatedBuildV3WithMultipartUrls) GetMaxChunkSize() float64 {
	if c == nil {
		return 0.0
	}
	return c.MaxChunkSize
}

func (c *CreatedBuildV3WithMultipartUrls) GetUploadParts() []BuildPart {
	if c == nil {
		return []BuildPart{}
	}
	return c.UploadParts
}
