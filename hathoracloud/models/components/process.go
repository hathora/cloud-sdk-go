// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

// ProcessExposedPort - Connection details for an active process.
type ProcessExposedPort struct {
	// Transport type specifies the underlying communication protocol to the exposed port.
	TransportType TransportType `json:"transportType"`
	Port          int           `json:"port"`
	Host          string        `json:"host"`
	Name          string        `json:"name"`
}

func (p *ProcessExposedPort) GetTransportType() TransportType {
	if p == nil {
		return TransportType("")
	}
	return p.TransportType
}

func (p *ProcessExposedPort) GetPort() int {
	if p == nil {
		return 0
	}
	return p.Port
}

func (p *ProcessExposedPort) GetHost() string {
	if p == nil {
		return ""
	}
	return p.Host
}

func (p *ProcessExposedPort) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

// Process - A process object represents a runtime instance of your game server and its metadata.
type Process struct {
	// Measures network traffic leaving the process in bytes.
	EgressedBytes int `json:"egressedBytes"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	IdleSince *time.Time `json:"idleSince"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ActiveConnectionsUpdatedAt time.Time `json:"activeConnectionsUpdatedAt"`
	// Tracks the number of active connections to a process.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ActiveConnections       int       `json:"activeConnections"`
	RoomsAllocatedUpdatedAt time.Time `json:"roomsAllocatedUpdatedAt"`
	// Tracks the number of rooms that have been allocated to the process.
	RoomsAllocated int `json:"roomsAllocated"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	RoomSlotsAvailableUpdatedAt time.Time `json:"roomSlotsAvailableUpdatedAt"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	RoomSlotsAvailable float64 `json:"roomSlotsAvailable"`
	// Process in drain will not accept any new rooms.
	Draining bool `json:"draining"`
	// When the process has been terminated.
	TerminatedAt *time.Time `json:"terminatedAt"`
	// When the process is issued to stop. We use this to determine when we should stop billing.
	StoppingAt *time.Time `json:"stoppingAt"`
	// When the process bound to the specified port. We use this to determine when we should start billing.
	StartedAt *time.Time `json:"startedAt"`
	// When the process started being provisioned.
	StartingAt time.Time `json:"startingAt"`
	// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
	RoomsPerProcess        int                 `json:"roomsPerProcess"`
	AdditionalExposedPorts []ExposedPort       `json:"additionalExposedPorts"`
	ExposedPort            *ProcessExposedPort `json:"exposedPort"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Port float64 `json:"port"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Host   string `json:"host"`
	Region Region `json:"region"`
	// System generated unique identifier to a runtime instance of your game server.
	ProcessID string `json:"processId"`
	// System generated id for a deployment. Increments by 1.
	DeploymentID int `json:"deploymentId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (p Process) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Process) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"egressedBytes", "activeConnectionsUpdatedAt", "activeConnections", "roomsAllocatedUpdatedAt", "roomsAllocated", "roomSlotsAvailableUpdatedAt", "roomSlotsAvailable", "draining", "startingAt", "roomsPerProcess", "additionalExposedPorts", "port", "host", "region", "processId", "deploymentId", "appId"}); err != nil {
		return err
	}
	return nil
}

func (p *Process) GetEgressedBytes() int {
	if p == nil {
		return 0
	}
	return p.EgressedBytes
}

func (p *Process) GetIdleSince() *time.Time {
	if p == nil {
		return nil
	}
	return p.IdleSince
}

func (p *Process) GetActiveConnectionsUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.ActiveConnectionsUpdatedAt
}

func (p *Process) GetActiveConnections() int {
	if p == nil {
		return 0
	}
	return p.ActiveConnections
}

func (p *Process) GetRoomsAllocatedUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.RoomsAllocatedUpdatedAt
}

func (p *Process) GetRoomsAllocated() int {
	if p == nil {
		return 0
	}
	return p.RoomsAllocated
}

func (p *Process) GetRoomSlotsAvailableUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.RoomSlotsAvailableUpdatedAt
}

func (p *Process) GetRoomSlotsAvailable() float64 {
	if p == nil {
		return 0.0
	}
	return p.RoomSlotsAvailable
}

func (p *Process) GetDraining() bool {
	if p == nil {
		return false
	}
	return p.Draining
}

func (p *Process) GetTerminatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.TerminatedAt
}

func (p *Process) GetStoppingAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.StoppingAt
}

func (p *Process) GetStartedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.StartedAt
}

func (p *Process) GetStartingAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.StartingAt
}

func (p *Process) GetRoomsPerProcess() int {
	if p == nil {
		return 0
	}
	return p.RoomsPerProcess
}

func (p *Process) GetAdditionalExposedPorts() []ExposedPort {
	if p == nil {
		return []ExposedPort{}
	}
	return p.AdditionalExposedPorts
}

func (p *Process) GetExposedPort() *ProcessExposedPort {
	if p == nil {
		return nil
	}
	return p.ExposedPort
}

func (p *Process) GetPort() float64 {
	if p == nil {
		return 0.0
	}
	return p.Port
}

func (p *Process) GetHost() string {
	if p == nil {
		return ""
	}
	return p.Host
}

func (p *Process) GetRegion() Region {
	if p == nil {
		return Region("")
	}
	return p.Region
}

func (p *Process) GetProcessID() string {
	if p == nil {
		return ""
	}
	return p.ProcessID
}

func (p *Process) GetDeploymentID() int {
	if p == nil {
		return 0
	}
	return p.DeploymentID
}

func (p *Process) GetAppID() string {
	if p == nil {
		return ""
	}
	return p.AppID
}
