// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
)

type CreateUserInviteScopesType string

const (
	CreateUserInviteScopesTypeUserRole     CreateUserInviteScopesType = "UserRole"
	CreateUserInviteScopesTypeArrayOfScope CreateUserInviteScopesType = "arrayOfScope"
)

// CreateUserInviteScopes - If not defined, the user has Admin access.
type CreateUserInviteScopes struct {
	UserRole     *UserRole `queryParam:"inline,name=scopes"`
	ArrayOfScope []Scope   `queryParam:"inline,name=scopes"`

	Type CreateUserInviteScopesType
}

func CreateCreateUserInviteScopesUserRole(userRole UserRole) CreateUserInviteScopes {
	typ := CreateUserInviteScopesTypeUserRole

	return CreateUserInviteScopes{
		UserRole: &userRole,
		Type:     typ,
	}
}

func CreateCreateUserInviteScopesArrayOfScope(arrayOfScope []Scope) CreateUserInviteScopes {
	typ := CreateUserInviteScopesTypeArrayOfScope

	return CreateUserInviteScopes{
		ArrayOfScope: arrayOfScope,
		Type:         typ,
	}
}

func (u *CreateUserInviteScopes) UnmarshalJSON(data []byte) error {

	var userRole UserRole = UserRole("")
	if err := utils.UnmarshalJSON(data, &userRole, "", true, nil); err == nil {
		u.UserRole = &userRole
		u.Type = CreateUserInviteScopesTypeUserRole
		return nil
	}

	var arrayOfScope []Scope = []Scope{}
	if err := utils.UnmarshalJSON(data, &arrayOfScope, "", true, nil); err == nil {
		u.ArrayOfScope = arrayOfScope
		u.Type = CreateUserInviteScopesTypeArrayOfScope
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateUserInviteScopes", string(data))
}

func (u CreateUserInviteScopes) MarshalJSON() ([]byte, error) {
	if u.UserRole != nil {
		return utils.MarshalJSON(u.UserRole, "", true)
	}

	if u.ArrayOfScope != nil {
		return utils.MarshalJSON(u.ArrayOfScope, "", true)
	}

	return nil, errors.New("could not marshal union type CreateUserInviteScopes: all fields are null")
}

type CreateUserInvite struct {
	// If not defined, the user has Admin access.
	Scopes *CreateUserInviteScopes `json:"scopes,omitempty"`
	// A user's email.
	UserEmail string `json:"userEmail"`
}

func (c *CreateUserInvite) GetScopes() *CreateUserInviteScopes {
	if c == nil {
		return nil
	}
	return c.Scopes
}

func (c *CreateUserInvite) GetUserEmail() string {
	if c == nil {
		return ""
	}
	return c.UserEmail
}
