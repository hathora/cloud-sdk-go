// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

type BuildWithUploadURLRegionalContainerTags struct {
	ContainerTag string `json:"containerTag"`
	Region       Region `json:"region"`
}

func (b *BuildWithUploadURLRegionalContainerTags) GetContainerTag() string {
	if b == nil {
		return ""
	}
	return b.ContainerTag
}

func (b *BuildWithUploadURLRegionalContainerTags) GetRegion() Region {
	if b == nil {
		return Region("")
	}
	return b.Region
}

type UploadBodyParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (u *UploadBodyParams) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UploadBodyParams) GetKey() string {
	if u == nil {
		return ""
	}
	return u.Key
}

// BuildWithUploadURL - A build represents a game server artifact and its associated metadata.
type BuildWithUploadURL struct {
	// When the build expired
	ExpiredAt *time.Time `json:"expiredAt,omitempty"`
	BuildTag  *string    `json:"buildTag,omitempty"`
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	RegionalContainerTags []BuildWithUploadURLRegionalContainerTags `json:"regionalContainerTags"`
	// The size (in bytes) of the Docker image built by Hathora.
	ImageSize int64       `json:"imageSize"`
	Status    BuildStatus `json:"status"`
	// When the build was deleted.
	DeletedAt *time.Time `json:"deletedAt"`
	// When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) finished executing.
	FinishedAt *time.Time `json:"finishedAt"`
	// When [`RunBuild()`](https://hathora.dev/api#tag/BuildV2/operation/RunBuild) is called.
	StartedAt *time.Time `json:"startedAt"`
	// When [`CreateBuild()`](https://hathora.dev/api#tag/BuildV2/operation/CreateBuild) is called.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// System generated id for a build. Increments by 1.
	BuildID int `json:"buildId"`
	// System generated unique identifier for an application.
	AppID            string             `json:"appId"`
	UploadBodyParams []UploadBodyParams `json:"uploadBodyParams"`
	UploadURL        string             `json:"uploadUrl"`
}

func (b BuildWithUploadURL) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(b, "", false)
}

func (b *BuildWithUploadURL) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &b, "", false, []string{"regionalContainerTags", "imageSize", "status", "deletedAt", "finishedAt", "startedAt", "createdAt", "createdBy", "buildId", "appId", "uploadBodyParams", "uploadUrl"}); err != nil {
		return err
	}
	return nil
}

func (b *BuildWithUploadURL) GetExpiredAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.ExpiredAt
}

func (b *BuildWithUploadURL) GetBuildTag() *string {
	if b == nil {
		return nil
	}
	return b.BuildTag
}

func (b *BuildWithUploadURL) GetRegionalContainerTags() []BuildWithUploadURLRegionalContainerTags {
	if b == nil {
		return []BuildWithUploadURLRegionalContainerTags{}
	}
	return b.RegionalContainerTags
}

func (b *BuildWithUploadURL) GetImageSize() int64 {
	if b == nil {
		return 0
	}
	return b.ImageSize
}

func (b *BuildWithUploadURL) GetStatus() BuildStatus {
	if b == nil {
		return BuildStatus("")
	}
	return b.Status
}

func (b *BuildWithUploadURL) GetDeletedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.DeletedAt
}

func (b *BuildWithUploadURL) GetFinishedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.FinishedAt
}

func (b *BuildWithUploadURL) GetStartedAt() *time.Time {
	if b == nil {
		return nil
	}
	return b.StartedAt
}

func (b *BuildWithUploadURL) GetCreatedAt() time.Time {
	if b == nil {
		return time.Time{}
	}
	return b.CreatedAt
}

func (b *BuildWithUploadURL) GetCreatedBy() string {
	if b == nil {
		return ""
	}
	return b.CreatedBy
}

func (b *BuildWithUploadURL) GetBuildID() int {
	if b == nil {
		return 0
	}
	return b.BuildID
}

func (b *BuildWithUploadURL) GetAppID() string {
	if b == nil {
		return ""
	}
	return b.AppID
}

func (b *BuildWithUploadURL) GetUploadBodyParams() []UploadBodyParams {
	if b == nil {
		return []UploadBodyParams{}
	}
	return b.UploadBodyParams
}

func (b *BuildWithUploadURL) GetUploadURL() string {
	if b == nil {
		return ""
	}
	return b.UploadURL
}
