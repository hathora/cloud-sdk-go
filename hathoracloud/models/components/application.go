// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

type ApplicationServiceConfig struct {
	// The configuration for the Process Autoscaler for this application.
	// Autoscaling must be enabled on a per-region basis.
	// EXPERIMENTAL - This feature is in closed beta.
	ProcessAutoscalerConfig *ProcessAutoscalerConfig `json:"processAutoscalerConfig,omitempty"`
	LoadBalancer            *LoadBalancerConfig      `json:"loadBalancer,omitempty"`
	// The headroom configuration for each region.
	StaticProcessAllocation []StaticProcessAllocationConfig `json:"staticProcessAllocation"`
}

func (a *ApplicationServiceConfig) GetProcessAutoscalerConfig() *ProcessAutoscalerConfig {
	if a == nil {
		return nil
	}
	return a.ProcessAutoscalerConfig
}

func (a *ApplicationServiceConfig) GetLoadBalancer() *LoadBalancerConfig {
	if a == nil {
		return nil
	}
	return a.LoadBalancer
}

func (a *ApplicationServiceConfig) GetStaticProcessAllocation() []StaticProcessAllocationConfig {
	if a == nil {
		return []StaticProcessAllocationConfig{}
	}
	return a.StaticProcessAllocation
}

// Application - An application object is the top level namespace for the game server.
type Application struct {
	// The email address or token id for the user that deleted the application.
	DeletedBy *string `json:"deletedBy"`
	// When the application was deleted.
	DeletedAt *time.Time `json:"deletedAt"`
	// When the application was created.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// System generated unique identifier for an organization. Not guaranteed to have a specific format.
	OrgID         string                    `json:"orgId"`
	ServiceConfig *ApplicationServiceConfig `json:"serviceConfig"`
	// Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
	AuthConfiguration AuthConfiguration `json:"authConfiguration"`
	// Secret that is used for identity and access management.
	AppSecret string `json:"appSecret"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
	// Readable name for an application. Must be unique within an organization.
	AppName string `json:"appName"`
}

func (a Application) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Application) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"deletedBy", "deletedAt", "createdAt", "createdBy", "orgId", "serviceConfig", "authConfiguration", "appSecret", "appId", "appName"}); err != nil {
		return err
	}
	return nil
}

func (a *Application) GetDeletedBy() *string {
	if a == nil {
		return nil
	}
	return a.DeletedBy
}

func (a *Application) GetDeletedAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DeletedAt
}

func (a *Application) GetCreatedAt() time.Time {
	if a == nil {
		return time.Time{}
	}
	return a.CreatedAt
}

func (a *Application) GetCreatedBy() string {
	if a == nil {
		return ""
	}
	return a.CreatedBy
}

func (a *Application) GetOrgID() string {
	if a == nil {
		return ""
	}
	return a.OrgID
}

func (a *Application) GetServiceConfig() *ApplicationServiceConfig {
	if a == nil {
		return nil
	}
	return a.ServiceConfig
}

func (a *Application) GetAuthConfiguration() AuthConfiguration {
	if a == nil {
		return AuthConfiguration{}
	}
	return a.AuthConfiguration
}

func (a *Application) GetAppSecret() string {
	if a == nil {
		return ""
	}
	return a.AppSecret
}

func (a *Application) GetAppID() string {
	if a == nil {
		return ""
	}
	return a.AppID
}

func (a *Application) GetAppName() string {
	if a == nil {
		return ""
	}
	return a.AppName
}
