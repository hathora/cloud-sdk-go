// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

// ProcessV2ExposedPort - Connection details for an active process.
type ProcessV2ExposedPort struct {
	// Transport type specifies the underlying communication protocol to the exposed port.
	TransportType TransportType `json:"transportType"`
	Port          int           `json:"port"`
	Host          string        `json:"host"`
	Name          string        `json:"name"`
}

func (p *ProcessV2ExposedPort) GetTransportType() TransportType {
	if p == nil {
		return TransportType("")
	}
	return p.TransportType
}

func (p *ProcessV2ExposedPort) GetPort() int {
	if p == nil {
		return 0
	}
	return p.Port
}

func (p *ProcessV2ExposedPort) GetHost() string {
	if p == nil {
		return ""
	}
	return p.Host
}

func (p *ProcessV2ExposedPort) GetName() string {
	if p == nil {
		return ""
	}
	return p.Name
}

type ProcessV2 struct {
	Status ProcessStatus `json:"status"`
	// Tracks the number of rooms that have been allocated to the process.
	RoomsAllocated int `json:"roomsAllocated"`
	// When the process has been terminated.
	TerminatedAt *time.Time `json:"terminatedAt"`
	// When the process is issued to stop. We use this to determine when we should stop billing.
	StoppingAt *time.Time `json:"stoppingAt"`
	// When the process bound to the specified port. We use this to determine when we should start billing.
	StartedAt *time.Time `json:"startedAt"`
	// When the process started being provisioned.
	CreatedAt time.Time `json:"createdAt"`
	// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
	RoomsPerProcess        int                   `json:"roomsPerProcess"`
	AdditionalExposedPorts []ExposedPort         `json:"additionalExposedPorts"`
	ExposedPort            *ProcessV2ExposedPort `json:"exposedPort"`
	Region                 Region                `json:"region"`
	// System generated unique identifier to a runtime instance of your game server.
	ProcessID string `json:"processId"`
	// System generated id for a deployment. Increments by 1.
	DeploymentID int `json:"deploymentId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
}

func (p ProcessV2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *ProcessV2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"status", "roomsAllocated", "createdAt", "roomsPerProcess", "additionalExposedPorts", "region", "processId", "deploymentId", "appId"}); err != nil {
		return err
	}
	return nil
}

func (p *ProcessV2) GetStatus() ProcessStatus {
	if p == nil {
		return ProcessStatus("")
	}
	return p.Status
}

func (p *ProcessV2) GetRoomsAllocated() int {
	if p == nil {
		return 0
	}
	return p.RoomsAllocated
}

func (p *ProcessV2) GetTerminatedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.TerminatedAt
}

func (p *ProcessV2) GetStoppingAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.StoppingAt
}

func (p *ProcessV2) GetStartedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.StartedAt
}

func (p *ProcessV2) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *ProcessV2) GetRoomsPerProcess() int {
	if p == nil {
		return 0
	}
	return p.RoomsPerProcess
}

func (p *ProcessV2) GetAdditionalExposedPorts() []ExposedPort {
	if p == nil {
		return []ExposedPort{}
	}
	return p.AdditionalExposedPorts
}

func (p *ProcessV2) GetExposedPort() *ProcessV2ExposedPort {
	if p == nil {
		return nil
	}
	return p.ExposedPort
}

func (p *ProcessV2) GetRegion() Region {
	if p == nil {
		return Region("")
	}
	return p.Region
}

func (p *ProcessV2) GetProcessID() string {
	if p == nil {
		return ""
	}
	return p.ProcessID
}

func (p *ProcessV2) GetDeploymentID() int {
	if p == nil {
		return 0
	}
	return p.DeploymentID
}

func (p *ProcessV2) GetAppID() string {
	if p == nil {
		return ""
	}
	return p.AppID
}
