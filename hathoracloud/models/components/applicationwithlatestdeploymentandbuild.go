// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/hathora/cloud-sdk-go/hathoracloud/internal/utils"
	"time"
)

type ApplicationWithLatestDeploymentAndBuildServiceConfig struct {
	// The configuration for the Process Autoscaler for this application.
	// Autoscaling must be enabled on a per-region basis.
	// EXPERIMENTAL - This feature is in closed beta.
	ProcessAutoscalerConfig *ProcessAutoscalerConfig `json:"processAutoscalerConfig,omitempty"`
	LoadBalancer            *LoadBalancerConfig      `json:"loadBalancer,omitempty"`
	// The headroom configuration for each region.
	// EXPERIMENTAL - this feature is in closed beta.
	StaticProcessAllocation []StaticProcessAllocationConfig `json:"staticProcessAllocation"`
}

func (o *ApplicationWithLatestDeploymentAndBuildServiceConfig) GetProcessAutoscalerConfig() *ProcessAutoscalerConfig {
	if o == nil {
		return nil
	}
	return o.ProcessAutoscalerConfig
}

func (o *ApplicationWithLatestDeploymentAndBuildServiceConfig) GetLoadBalancer() *LoadBalancerConfig {
	if o == nil {
		return nil
	}
	return o.LoadBalancer
}

func (o *ApplicationWithLatestDeploymentAndBuildServiceConfig) GetStaticProcessAllocation() []StaticProcessAllocationConfig {
	if o == nil {
		return []StaticProcessAllocationConfig{}
	}
	return o.StaticProcessAllocation
}

type ApplicationWithLatestDeploymentAndBuildEnv struct {
	Value string `json:"value"`
	Name  string `json:"name"`
}

func (o *ApplicationWithLatestDeploymentAndBuildEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *ApplicationWithLatestDeploymentAndBuildEnv) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ApplicationWithLatestDeploymentAndBuildDeployment struct {
	// the id of the fleet
	FleetID *string `json:"fleetId,omitempty"`
	// Arbitrary metadata associated with a deployment.
	DeploymentTag *string `json:"deploymentTag,omitempty"`
	// Option to shut down processes that have had no new connections or rooms
	// for five minutes.
	IdleTimeoutEnabled bool `json:"idleTimeoutEnabled"`
	// The environment variable that our process will have access to at runtime.
	Env []ApplicationWithLatestDeploymentAndBuildEnv `json:"env"`
	// Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
	RoomsPerProcess int `json:"roomsPerProcess"`
	// Additional ports your server listens on.
	AdditionalContainerPorts []ContainerPort `json:"additionalContainerPorts"`
	// A container port object represents the transport configruations for how your server will listen.
	DefaultContainerPort ContainerPort `json:"defaultContainerPort"`
	// When the deployment was created.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// The number of GPUs allocated to your process. Must be an integer.
	// If not provided, the requested GPU is 0.
	RequestedGPU *float64 `json:"requestedGPU,omitempty"`
	// EXPERIMENTAL - this feature is in closed beta.
	// The number of GPUs allocated to your process. Must be an integer.
	// If not provided, the requested GPU is 0.
	ExperimentalRequestedGPU *float64 `json:"experimentalRequestedGPU,omitempty"`
	// The amount of memory allocated to your process. By default, this is capped
	// at 8192 MB, but can be increased further on the Enterprise tier.
	RequestedMemoryMB float64 `json:"requestedMemoryMB"`
	// The number of cores allocated to your process.
	RequestedCPU float64 `json:"requestedCPU"`
	// System generated id for a deployment.
	DeploymentID string `json:"deploymentId"`
	// Tag to associate an external version with a build. It is accessible via [`GetBuild()`](https://hathora.dev/api#tag/BuildsV3/operation/GetBuild).
	BuildTag *string `json:"buildTag,omitempty"`
	// System generated id for a build. Can also be user defined when creating a build.
	BuildID string `json:"buildId"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
	// A build represents a game server artifact and its associated metadata.
	Build BuildV3 `json:"build"`
}

func (a ApplicationWithLatestDeploymentAndBuildDeployment) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationWithLatestDeploymentAndBuildDeployment) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"idleTimeoutEnabled", "env", "roomsPerProcess", "additionalContainerPorts", "defaultContainerPort", "createdAt", "createdBy", "requestedMemoryMB", "requestedCPU", "deploymentId", "buildId", "appId", "build"}); err != nil {
		return err
	}
	return nil
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetFleetID() *string {
	if o == nil {
		return nil
	}
	return o.FleetID
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetDeploymentTag() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentTag
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetIdleTimeoutEnabled() bool {
	if o == nil {
		return false
	}
	return o.IdleTimeoutEnabled
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetEnv() []ApplicationWithLatestDeploymentAndBuildEnv {
	if o == nil {
		return []ApplicationWithLatestDeploymentAndBuildEnv{}
	}
	return o.Env
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetRoomsPerProcess() int {
	if o == nil {
		return 0
	}
	return o.RoomsPerProcess
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetAdditionalContainerPorts() []ContainerPort {
	if o == nil {
		return []ContainerPort{}
	}
	return o.AdditionalContainerPorts
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetDefaultContainerPort() ContainerPort {
	if o == nil {
		return ContainerPort{}
	}
	return o.DefaultContainerPort
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetRequestedGPU() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedGPU
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetExperimentalRequestedGPU() *float64 {
	if o == nil {
		return nil
	}
	return o.ExperimentalRequestedGPU
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetRequestedMemoryMB() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedMemoryMB
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetRequestedCPU() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedCPU
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetBuildTag() *string {
	if o == nil {
		return nil
	}
	return o.BuildTag
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetBuildID() string {
	if o == nil {
		return ""
	}
	return o.BuildID
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *ApplicationWithLatestDeploymentAndBuildDeployment) GetBuild() BuildV3 {
	if o == nil {
		return BuildV3{}
	}
	return o.Build
}

// ApplicationWithLatestDeploymentAndBuild - An application object is the top level namespace for the game server.
type ApplicationWithLatestDeploymentAndBuild struct {
	// The email address or token id for the user that deleted the application.
	DeletedBy *string `json:"deletedBy"`
	// When the application was deleted.
	DeletedAt *time.Time `json:"deletedAt"`
	// When the application was created.
	CreatedAt time.Time `json:"createdAt"`
	CreatedBy string    `json:"createdBy"`
	// System generated unique identifier for an organization. Not guaranteed to have a specific format.
	OrgID         string                                                `json:"orgId"`
	ServiceConfig *ApplicationWithLatestDeploymentAndBuildServiceConfig `json:"serviceConfig"`
	// Configure [player authentication](https://hathora.dev/docs/backend-integrations/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
	AuthConfiguration AuthConfiguration `json:"authConfiguration"`
	// Secret that is used for identity and access management.
	AppSecret string `json:"appSecret"`
	// System generated unique identifier for an application.
	AppID string `json:"appId"`
	// Readable name for an application. Must be unique within an organization.
	AppName    string                                             `json:"appName"`
	Deployment *ApplicationWithLatestDeploymentAndBuildDeployment `json:"deployment,omitempty"`
}

func (a ApplicationWithLatestDeploymentAndBuild) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *ApplicationWithLatestDeploymentAndBuild) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, []string{"deletedBy", "deletedAt", "createdAt", "createdBy", "orgId", "serviceConfig", "authConfiguration", "appSecret", "appId", "appName"}); err != nil {
		return err
	}
	return nil
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetDeletedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetOrgID() string {
	if o == nil {
		return ""
	}
	return o.OrgID
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetServiceConfig() *ApplicationWithLatestDeploymentAndBuildServiceConfig {
	if o == nil {
		return nil
	}
	return o.ServiceConfig
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetAuthConfiguration() AuthConfiguration {
	if o == nil {
		return AuthConfiguration{}
	}
	return o.AuthConfiguration
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetAppSecret() string {
	if o == nil {
		return ""
	}
	return o.AppSecret
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetAppID() string {
	if o == nil {
		return ""
	}
	return o.AppID
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *ApplicationWithLatestDeploymentAndBuild) GetDeployment() *ApplicationWithLatestDeploymentAndBuildDeployment {
	if o == nil {
		return nil
	}
	return o.Deployment
}
